// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  userId        Int         @unique @default(autoincrement())
  name          String
  password      String        // Hashed password
  profilePicture String?      // Base64 encoded profile picture
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          UserRole       @default(USER)
  
  // Relations
  voiceProfiles VoiceProfile[]
  queryHistory  QueryHistory[]
  dashboards    Dashboard[]
  settings      UserSettings?

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model VoiceProfile {
  id            String   @id @default(cuid())
  userId        String
  embeddings    Json    // Binary voice embeddings data
  modelVersion  String?
  isActive      Boolean  @default(true)
  audioPath     String?  // Path to the audio file
  createdAt     DateTime @default(now())
  lastUpdated   DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("voice_profiles")
}

model DatabaseMetadata {
  id            String   @id @default(cuid())
  tableName     String
  description   String?  // Human-readable description of the table
  isVisible     Boolean  @default(true)  // Can be hidden from certain user roles
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  columns       ColumnMetadata[]

  @@unique([tableName])
  @@map("database_metadata")
}

model ColumnMetadata {
  id                String          @id @default(cuid())
  databaseMetadataId String
  columnName        String
  dataType          String
  description       String?         // Human-readable description of the column
  isIdentifier      Boolean         @default(false)  // Is this a primary/foreign key
  isSensitive       Boolean         @default(false)  // Contains sensitive data (PII, etc.)
  
  // Relations
  databaseMetadata  DatabaseMetadata @relation(fields: [databaseMetadataId], references: [id], onDelete: Cascade)

  @@unique([databaseMetadataId, columnName])
  @@map("column_metadata")
}

model QueryHistory {
  id            String   @id @default(cuid())
  userId        String
  userQuery     String   @db.Text  // Natural language query
  sqlQuery      String   @db.Text  // Generated SQL query
  relatedQueries Json?   // Array of related SQL queries
  results       Json?    // Query results (might be large)
  executionTime Int?     // Query execution time in ms
  successful    Boolean  @default(true)
  errorMessage  String?
  createdAt     DateTime @default(now())

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  visualization Visualization?

  @@map("query_history")
}

model Visualization {
  id            String   @id @default(cuid())
  queryId       String   @unique
  chartType     String   // bar, line, pie, table, etc.
  chartOptions  Json?    // Chart configuration
  title         String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  query         QueryHistory @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@map("visualizations")
}

model Dashboard {
  id            String         @id @default(cuid())
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  widgets       DashboardWidget[]

  @@map("dashboards")
}

model DashboardWidget {
  id            String   @id @default(cuid())
  dashboardId   String
  title         String
  description   String?
  sqlQuery      String   @db.Text
  chartType     String
  chartOptions  Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  dashboard     Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@map("dashboard_widgets")
}

model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  language            String   @default("en")
  voiceEnabled        Boolean  @default(true)
  autoSuggestEnabled  Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}
